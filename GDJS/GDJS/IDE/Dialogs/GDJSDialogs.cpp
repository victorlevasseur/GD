//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: GDJS.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "GDJSDialogs.h"


// Declare the bitmap loading function
extern void wxCB65InitBitmapResources();

static bool bBitmapLoaded = false;


BaseProjectExportDialog::BaseProjectExportDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCB65InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer33 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer33->SetFlexibleDirection( wxBOTH );
    flexGridSizer33->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer33->AddGrowableCol(0);
    flexGridSizer33->AddGrowableRow(0);
    this->SetSizer(flexGridSizer33);
    
    m_staticText59 = new wxStaticText(this, wxID_ANY, _("Choose how to export the game:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer33->Add(m_staticText59, 0, wxALL, 5);
    
    exportChoice = new wxChoicebook(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBK_DEFAULT);
    exportChoice->SetName(wxT("exportChoice"));
    
    flexGridSizer33->Add(exportChoice, 0, wxALL, 5);
    
    m_panel61 = new wxPanel(exportChoice, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    exportChoice->AddPage(m_panel61, _("Export to a website"), false);
    
    wxFlexGridSizer* flexGridSizer34 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer34->SetFlexibleDirection( wxBOTH );
    flexGridSizer34->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer34->AddGrowableCol(0);
    m_panel61->SetSizer(flexGridSizer34);
    
    wxFlexGridSizer* flexGridSizer35 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer35->SetFlexibleDirection( wxBOTH );
    flexGridSizer35->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer35->AddGrowableCol(0);
    flexGridSizer35->AddGrowableRow(0);
    
    flexGridSizer34->Add(flexGridSizer35, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    wxFlexGridSizer* flexGridSizer36 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer36->SetFlexibleDirection( wxBOTH );
    flexGridSizer36->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer36->AddGrowableCol(1);
    
    flexGridSizer35->Add(flexGridSizer36, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    ID_STATICTEXT4 = new wxStaticText(m_panel61, wxID_ANY, _("Export folder:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer36->Add(ID_STATICTEXT4, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer38 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer38->SetFlexibleDirection( wxBOTH );
    flexGridSizer38->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer38->AddGrowableCol(0);
    flexGridSizer38->AddGrowableRow(0);
    
    flexGridSizer36->Add(flexGridSizer38, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    exportFolderEdit = new wxTextCtrl(m_panel61, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    exportFolderEdit->SetHint(wxT(""));
    #endif
    
    flexGridSizer38->Add(exportFolderEdit, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    browseBt = new wxButton(m_panel61, wxID_ANY, _("..."), wxDefaultPosition, wxSize(30,-1), 0);
    
    flexGridSizer38->Add(browseBt, 1, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer36->Add(4, 9, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer152 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer152->SetFlexibleDirection( wxBOTH );
    flexGridSizer152->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer36->Add(flexGridSizer152, 1, wxALL|wxEXPAND, 5);
    
    minifyCheck = new wxCheckBox(m_panel61, wxID_ANY, _("Minify and optimize"), wxDefaultPosition, wxSize(-1,-1), 0);
    minifyCheck->SetValue(true);
    
    flexGridSizer152->Add(minifyCheck, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    nodejsLink = new wxHyperlinkCtrl(m_panel61, wxID_ANY, _("(Node.js is required)"), wxT("http://nodejs.org/"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    nodejsLink->SetNormalColour(wxColour(wxT("#0000FF")));
    nodejsLink->SetHoverColour(wxColour(wxT("#0000FF")));
    nodejsLink->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer152->Add(nodejsLink, 0, wxALL, 5);
    
    ID_STATICTEXT2 = new wxStaticText(m_panel61, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer34->Add(ID_STATICTEXT2, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_STATICTEXT1 = new wxStaticText(m_panel61, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer34->Add(ID_STATICTEXT1, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxStaticBoxSizer* staticBoxSizer45 = new wxStaticBoxSizer( new wxStaticBox(m_panel61, wxID_ANY, _("Note")), wxVERTICAL);
    
    flexGridSizer34->Add(staticBoxSizer45, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer46 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer46->SetFlexibleDirection( wxBOTH );
    flexGridSizer46->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    staticBoxSizer45->Add(flexGridSizer46, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    ID_STATICTEXT3 = new wxStaticText(m_panel61, wxID_ANY, _("When the exportation is done, send the files to your website (you need a web hosting) and just go to the website to start the game."), wxDefaultPosition, wxSize(-1,-1), 0);
    ID_STATICTEXT3->Wrap(450);
    
    flexGridSizer46->Add(ID_STATICTEXT3, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_HYPERLINKCTRL2 = new wxHyperlinkCtrl(m_panel61, wxID_ANY, _("Click here to learn more about how to export your project"), wxT("http://wiki.compilgames.net/doku.php/en/game_develop/tutorials/howtodistribute"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    ID_HYPERLINKCTRL2->SetNormalColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL2->SetHoverColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL2->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer46->Add(ID_HYPERLINKCTRL2, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_panel118 = new wxPanel(exportChoice, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    exportChoice->AddPage(m_panel118, _("Export to iOS or Android with Cordova (Intel XDK)"), false);
    
    wxFlexGridSizer* flexGridSizer5511 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer5511->SetFlexibleDirection( wxBOTH );
    flexGridSizer5511->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5511->AddGrowableCol(0);
    flexGridSizer5511->AddGrowableRow(1);
    m_panel118->SetSizer(flexGridSizer5511);
    
    cocoonjslogoPanel22 = new wxPanel(m_panel118, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL|wxBORDER_SIMPLE);
    cocoonjslogoPanel22->SetBackgroundColour(wxColour(wxT("rgb(51,16,69)")));
    
    flexGridSizer5511->Add(cocoonjslogoPanel22, 0, wxALL|wxALIGN_CENTER, 0);
    
    wxFlexGridSizer* flexGridSizer6333 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer6333->SetFlexibleDirection( wxBOTH );
    flexGridSizer6333->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    cocoonjslogoPanel22->SetSizer(flexGridSizer6333);
    
    m_staticBitmap5744 = new wxStaticBitmap(cocoonjslogoPanel22, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("intelxdklogo")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    flexGridSizer6333->Add(m_staticBitmap5744, 0, wxALL, 0);
    
    m_staticText6555 = new wxStaticText(m_panel118, wxID_ANY, _("Cordova is a technology that enables HTML5 games to\nbe packaged for iOS, Android and more. Third-party tools\nlike Intel XDK allow game developers to bundle their games\nusing Cordova."), wxDefaultPosition, wxSize(-1,-1), wxALIGN_CENTRE);
    
    flexGridSizer5511->Add(m_staticText6555, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_TOP, 10);
    
    wxStaticBoxSizer* staticBoxSizer1126 = new wxStaticBoxSizer( new wxStaticBox(m_panel118, wxID_ANY, _("Note")), wxVERTICAL);
    
    flexGridSizer5511->Add(staticBoxSizer1126, 1, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* flexGridSizer1147 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1147->SetFlexibleDirection( wxBOTH );
    flexGridSizer1147->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1147->AddGrowableCol(0);
    
    staticBoxSizer1126->Add(flexGridSizer1147, 1, wxALL|wxEXPAND, 0);
    
    m_staticText6768 = new wxStaticText(m_panel118, wxID_ANY, _("Just click on the \"Export\" button and GDevelop will package your game.\nYou'll then be able to import the project into Intel XDK (or any other Cordova compatible tool), which will allow you to compile the game into an iOS and Android application."), wxDefaultPosition, wxSize(-1,-1), wxALIGN_LEFT);
    m_staticText6768->Wrap(450);
    
    flexGridSizer1147->Add(m_staticText6768, 0, wxALL|wxEXPAND|wxALIGN_CENTER|wxALIGN_LEFT, 5);
    
    m_panel611 = new wxPanel(exportChoice, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    exportChoice->AddPage(m_panel611, _("Export to a website or native game with Cocos2d-JS (experimental)"), false);
    
    wxFlexGridSizer* flexGridSizer342 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer342->SetFlexibleDirection( wxBOTH );
    flexGridSizer342->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer342->AddGrowableCol(0);
    m_panel611->SetSizer(flexGridSizer342);
    
    wxFlexGridSizer* flexGridSizer364 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer364->SetFlexibleDirection( wxBOTH );
    flexGridSizer364->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer364->AddGrowableCol(1);
    
    flexGridSizer342->Add(flexGridSizer364, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    ID_STATICTEXT45 = new wxStaticText(m_panel611, wxID_ANY, _("Export folder:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer364->Add(ID_STATICTEXT45, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer386 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer386->SetFlexibleDirection( wxBOTH );
    flexGridSizer386->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer386->AddGrowableCol(0);
    flexGridSizer386->AddGrowableRow(0);
    
    flexGridSizer364->Add(flexGridSizer386, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    cocosExportFolderEdit = new wxTextCtrl(m_panel611, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    cocosExportFolderEdit->SetHint(wxT(""));
    #endif
    
    flexGridSizer386->Add(cocosExportFolderEdit, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    cocosExportBrowseBt = new wxButton(m_panel611, wxID_ANY, _("..."), wxDefaultPosition, wxSize(30,-1), 0);
    
    flexGridSizer386->Add(cocosExportBrowseBt, 1, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    cocosDebugCheck = new wxCheckBox(m_panel611, wxID_ANY, _("Debug mode (show FPS counter and stats in the bottom left)"), wxDefaultPosition, wxSize(-1,-1), 0);
    cocosDebugCheck->SetValue(false);
    
    flexGridSizer342->Add(cocosDebugCheck, 0, wxALL, 5);
    
    ID_STATICTEXT213 = new wxStaticText(m_panel611, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer342->Add(ID_STATICTEXT213, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_STATICTEXT114 = new wxStaticText(m_panel611, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer342->Add(ID_STATICTEXT114, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxStaticBoxSizer* staticBoxSizer4515 = new wxStaticBoxSizer( new wxStaticBox(m_panel611, wxID_ANY, _("Note")), wxVERTICAL);
    
    flexGridSizer342->Add(staticBoxSizer4515, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer4616 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer4616->SetFlexibleDirection( wxBOTH );
    flexGridSizer4616->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4616->AddGrowableCol(0);
    
    staticBoxSizer4515->Add(flexGridSizer4616, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    ID_STATICTEXT31719 = new wxStaticText(m_panel611, wxID_ANY, _("When the exportation is done, send the files to your website (you need a web hosting) and just go to the website to start the game."), wxDefaultPosition, wxSize(-1,-1), 0);
    ID_STATICTEXT31719->Wrap(450);
    
    flexGridSizer4616->Add(ID_STATICTEXT31719, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_STATICTEXT317 = new wxStaticText(m_panel611, wxID_ANY, _("If you install Cocos2d-x, you can also use it to export the game to Android, iOS, Windows, Mac or Linux."), wxDefaultPosition, wxSize(-1,-1), 0);
    ID_STATICTEXT317->Wrap(450);
    
    flexGridSizer4616->Add(ID_STATICTEXT317, 1, wxALL|wxEXPAND|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_HYPERLINKCTRL218 = new wxHyperlinkCtrl(m_panel611, wxID_ANY, _("Click here to learn more about Cocos2d export"), wxT("http://wiki.compilgames.net/doku.php/en/game_develop/tutorials/howtoexportwithcocos2dx"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    ID_HYPERLINKCTRL218->SetNormalColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL218->SetHoverColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL218->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer4616->Add(ID_HYPERLINKCTRL218, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer50 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer50->SetFlexibleDirection( wxBOTH );
    flexGridSizer50->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer50->AddGrowableCol(0);
    
    flexGridSizer33->Add(flexGridSizer50, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    wxFlexGridSizer* flexGridSizer51 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer51->SetFlexibleDirection( wxBOTH );
    flexGridSizer51->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer51->AddGrowableRow(0);
    
    flexGridSizer50->Add(flexGridSizer51, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 0);
    
    ID_STATICBITMAP2 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("helpicon")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    flexGridSizer51->Add(ID_STATICBITMAP2, 1, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_HYPERLINKCTRL1 = new wxHyperlinkCtrl(this, wxID_ANY, _("Help"), wxT("http://wiki.compilgames.net/doku.php/en/game_develop/tutorials/howtodistribute"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    ID_HYPERLINKCTRL1->SetToolTip(_("Display help about this window"));
    ID_HYPERLINKCTRL1->SetNormalColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL1->SetHoverColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL1->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer51->Add(ID_HYPERLINKCTRL1, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    closeBt = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer50->Add(closeBt, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    exportBt = new wxButton(this, wxID_ANY, _("Export"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer50->Add(exportBt, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(exportChoice)){
        wxPersistenceManager::Get().RegisterAndRestore(exportChoice);
    } else {
        wxPersistenceManager::Get().Restore(exportChoice);
    }
    #endif
    
    SetName(wxT("BaseProjectExportDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    browseBt->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnBrowseBtClick), NULL, this);
    cocosExportBrowseBt->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnCocosExportBrowseBtClick), NULL, this);
    closeBt->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnCloseBtClicked), NULL, this);
    exportBt->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnExportBtClicked), NULL, this);
    
}

BaseProjectExportDialog::~BaseProjectExportDialog()
{
    browseBt->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnBrowseBtClick), NULL, this);
    cocosExportBrowseBt->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnCocosExportBrowseBtClick), NULL, this);
    closeBt->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnCloseBtClicked), NULL, this);
    exportBt->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseProjectExportDialog::OnExportBtClicked), NULL, this);
    
}

BaseCocoonJSUploadDialog::BaseCocoonJSUploadDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCB65InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer87 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer87->SetFlexibleDirection( wxBOTH );
    flexGridSizer87->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer87->AddGrowableCol(0);
    flexGridSizer87->AddGrowableRow(0);
    this->SetSizer(flexGridSizer87);
    
    cocoonjslogoPanel27 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL|wxBORDER_SIMPLE);
    cocoonjslogoPanel27->SetBackgroundColour(wxColour(wxT("rgb(51,16,69)")));
    
    flexGridSizer87->Add(cocoonjslogoPanel27, 0, wxALL|wxALIGN_CENTER, 5);
    
    wxFlexGridSizer* flexGridSizer6338 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer6338->SetFlexibleDirection( wxBOTH );
    flexGridSizer6338->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    cocoonjslogoPanel27->SetSizer(flexGridSizer6338);
    
    m_staticBitmap5749 = new wxStaticBitmap(cocoonjslogoPanel27, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("cocoonjslogo")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    flexGridSizer6338->Add(m_staticBitmap5749, 0, wxALL, 0);
    
    m_staticText101 = new wxStaticText(this, wxID_ANY, _("You can now go on the Ludei's cloud compiler:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer87->Add(m_staticText101, 0, wxALL, 5);
    
    m_hyperLink104 = new wxHyperlinkCtrl(this, wxID_ANY, _("cloud.ludei.com"), wxT("https://cloud.ludei.com"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    m_hyperLink104->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperLink104->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperLink104->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer87->Add(m_hyperLink104, 0, wxALL|wxALIGN_CENTER, 5);
    
    wxFlexGridSizer* flexGridSizer1910 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1910->SetFlexibleDirection( wxBOTH );
    flexGridSizer1910->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1910->AddGrowableCol(0);
    flexGridSizer1910->AddGrowableRow(0);
    
    flexGridSizer87->Add(flexGridSizer1910, 1, wxALL|wxEXPAND, 0);
    
    m_staticText15111 = new wxStaticText(this, wxID_ANY, _("The file to be uploaded was saved at this location on your computer:"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticText15111->Wrap(700);
    
    flexGridSizer1910->Add(m_staticText15111, 0, wxALL, 5);
    
    packageLocationEdit = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    packageLocationEdit->SetHint(wxT(""));
    #endif
    
    flexGridSizer1910->Add(packageLocationEdit, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 5);
    
    m_staticText106 = new wxStaticText(this, wxID_ANY, _("On the cloud compiler, create a new project, add some required assets (splash\nscreens...) and upload this file. You'll then be able to compile the game for\nmost popular mobile phones and web stores."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer87->Add(m_staticText106, 0, wxALL, 5);
    
    m_button108 = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_button108->SetDefault();
    m_button108->SetToolTip(_("Close this dialog"));
    
    flexGridSizer87->Add(m_button108, 0, wxALL|wxALIGN_RIGHT, 5);
    
    SetName(wxT("BaseCocoonJSUploadDialog"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button108->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseCocoonJSUploadDialog::OnCloseBtClicked), NULL, this);
    
}

BaseCocoonJSUploadDialog::~BaseCocoonJSUploadDialog()
{
    m_button108->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseCocoonJSUploadDialog::OnCloseBtClicked), NULL, this);
    
}

BaseCordovaPackageDialog::BaseCordovaPackageDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCB65InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer873 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer873->SetFlexibleDirection( wxBOTH );
    flexGridSizer873->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer873->AddGrowableCol(0);
    flexGridSizer873->AddGrowableRow(0);
    this->SetSizer(flexGridSizer873);
    
    cocoonjslogoPanel274 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL|wxBORDER_SIMPLE);
    cocoonjslogoPanel274->SetBackgroundColour(wxColour(wxT("rgb(51,16,69)")));
    
    flexGridSizer873->Add(cocoonjslogoPanel274, 0, wxALL|wxALIGN_CENTER, 5);
    
    wxFlexGridSizer* flexGridSizer63385 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer63385->SetFlexibleDirection( wxBOTH );
    flexGridSizer63385->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    cocoonjslogoPanel274->SetSizer(flexGridSizer63385);
    
    m_staticBitmap57496 = new wxStaticBitmap(cocoonjslogoPanel274, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("intelxdklogo")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    flexGridSizer63385->Add(m_staticBitmap57496, 0, wxALL, 0);
    
    m_staticText1017 = new wxStaticText(this, wxID_ANY, _("You can now open Intel XDK. Download it here if it is not installed yet:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer873->Add(m_staticText1017, 0, wxALL, 5);
    
    m_hyperLink1048 = new wxHyperlinkCtrl(this, wxID_ANY, _("xdk-software.intel.com"), wxT("http://xdk-software.intel.com"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    m_hyperLink1048->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperLink1048->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperLink1048->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer873->Add(m_hyperLink1048, 0, wxALL|wxALIGN_CENTER, 5);
    
    wxFlexGridSizer* flexGridSizer19109 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer19109->SetFlexibleDirection( wxBOTH );
    flexGridSizer19109->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer19109->AddGrowableCol(0);
    flexGridSizer19109->AddGrowableRow(0);
    
    flexGridSizer873->Add(flexGridSizer19109, 1, wxALL|wxEXPAND, 0);
    
    m_staticText1511110 = new wxStaticText(this, wxID_ANY, _("Then, import the project which was saved at this location on your computer:"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticText1511110->Wrap(480);
    
    flexGridSizer19109->Add(m_staticText1511110, 0, wxALL, 5);
    
    packageLocationEdit = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    packageLocationEdit->SetHint(wxT(""));
    #endif
    
    flexGridSizer19109->Add(packageLocationEdit, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 5);
    
    m_staticText10611 = new wxStaticText(this, wxID_ANY, _("Activate any Cordova plugin that may be required by the objects\nyou use in the project.\nIn the \"Build\" tab, select \"Crosswalk for Android\" or \"iOS\".\nXDK will be able to package your game into a native Android or iOS application."), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticText10611->Wrap(480);
    
    flexGridSizer873->Add(m_staticText10611, 0, wxALL, 5);
    
    wxFlexGridSizer* flexGridSizer5014 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer5014->SetFlexibleDirection( wxBOTH );
    flexGridSizer5014->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5014->AddGrowableCol(0);
    
    flexGridSizer873->Add(flexGridSizer5014, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    wxFlexGridSizer* flexGridSizer5115 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer5115->SetFlexibleDirection( wxBOTH );
    flexGridSizer5115->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5115->AddGrowableRow(0);
    
    flexGridSizer5014->Add(flexGridSizer5115, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 0);
    
    ID_STATICBITMAP216 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("helpicon")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    flexGridSizer5115->Add(ID_STATICBITMAP216, 1, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    ID_HYPERLINKCTRL117 = new wxHyperlinkCtrl(this, wxID_ANY, _("Detailed explanation available on the wiki"), wxT("http://wiki.compilgames.net/doku.php/en/game_develop/tutorials/howtouseintelxdk"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    ID_HYPERLINKCTRL117->SetToolTip(_("Display help about this window"));
    ID_HYPERLINKCTRL117->SetNormalColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL117->SetHoverColour(wxColour(wxT("#0000FF")));
    ID_HYPERLINKCTRL117->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer5115->Add(ID_HYPERLINKCTRL117, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button10812 = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_button10812->SetDefault();
    m_button10812->SetToolTip(_("Close this dialog"));
    
    flexGridSizer5014->Add(m_button10812, 0, wxALL|wxALIGN_RIGHT, 5);
    
    SetName(wxT("BaseCordovaPackageDialog"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button10812->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseCordovaPackageDialog::OnCloseClicked), NULL, this);
    
}

BaseCordovaPackageDialog::~BaseCordovaPackageDialog()
{
    m_button10812->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseCordovaPackageDialog::OnCloseClicked), NULL, this);
    
}

BaseJsCodeEventDialog::BaseJsCodeEventDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCB65InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer160 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer160->SetFlexibleDirection( wxBOTH );
    flexGridSizer160->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer160->AddGrowableCol(0);
    flexGridSizer160->AddGrowableRow(0);
    this->SetSizer(flexGridSizer160);
    
    wxFlexGridSizer* flexGridSizer162 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer162->SetFlexibleDirection( wxBOTH );
    flexGridSizer162->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer162->AddGrowableCol(0);
    flexGridSizer162->AddGrowableRow(0);
    
    flexGridSizer160->Add(flexGridSizer162, 1, wxALL|wxEXPAND, 0);
    
    codeEdit = new wxStyledTextCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), 0);
    codeEdit->SetFocus();
    // Configure the fold margin
    codeEdit->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    codeEdit->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    codeEdit->SetMarginSensitive(4, true);
    codeEdit->SetMarginWidth    (4, 16);
    
    codeEdit->SetProperty(wxT("fold"),wxT("1"));
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN);
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_ARROW);
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_BACKGROUND);
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_BACKGROUND);
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_ARROW);
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
    codeEdit->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
    // Configure the tracker margin
    codeEdit->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    codeEdit->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    codeEdit->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    codeEdit->SetMarginWidth(2, 0);
    codeEdit->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int codeEdit_PixelWidth = 4 + 5 *codeEdit->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    codeEdit->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    codeEdit->SetMarginWidth(0,codeEdit_PixelWidth);
    
    // Configure the line symbol margin
    codeEdit->SetMarginType(3, wxSTC_MARGIN_FORE);
    codeEdit->SetMarginMask(3, 0);
    codeEdit->SetMarginWidth(3,0);
    // Select the lexer
    codeEdit->SetLexer(wxSTC_LEX_ESCRIPT);
    // Set default font / styles
    codeEdit->StyleClearAll();
    codeEdit->SetWrapMode(0);
    codeEdit->SetIndentationGuides(0);
    codeEdit->SetKeyWords(0, wxT(""));
    codeEdit->SetKeyWords(1, wxT(""));
    codeEdit->SetKeyWords(2, wxT(""));
    codeEdit->SetKeyWords(3, wxT(""));
    codeEdit->SetKeyWords(4, wxT(""));
    
    flexGridSizer162->Add(codeEdit, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* flexGridSizer178 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer178->SetFlexibleDirection( wxBOTH );
    flexGridSizer178->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer178->AddGrowableCol(0);
    
    flexGridSizer162->Add(flexGridSizer178, 1, wxALL|wxEXPAND, 0);
    
    m_staticText180 = new wxStaticText(this, wxID_ANY, _("The scene can be accessed using 'runtimeScene' variable."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer178->Add(m_staticText180, 0, wxALL, 5);
    
    wxFlexGridSizer* flexGridSizer182 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer182->SetFlexibleDirection( wxBOTH );
    flexGridSizer182->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer182->AddGrowableCol(1);
    
    flexGridSizer178->Add(flexGridSizer182, 1, wxALL|wxEXPAND, 0);
    
    m_staticText184 = new wxStaticText(this, wxID_ANY, _("Pick these objects into 'objects' variable:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer182->Add(m_staticText184, 0, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    objectsEdit = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    objectsEdit->SetHint(wxT(""));
    #endif
    
    flexGridSizer182->Add(objectsEdit, 0, wxALL|wxEXPAND, 5);
    
    m_bmpButton188 = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("object16")), wxDefaultPosition, wxSize(-1,-1), wxBU_AUTODRAW);
    
    flexGridSizer182->Add(m_bmpButton188, 0, wxALL, 5);
    
    wxFlexGridSizer* flexGridSizer164 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer164->SetFlexibleDirection( wxBOTH );
    flexGridSizer164->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer164->AddGrowableCol(1);
    
    flexGridSizer160->Add(flexGridSizer164, 1, wxALL|wxEXPAND, 0);
    
    m_staticBitmap190 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("help16")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    flexGridSizer164->Add(m_staticBitmap190, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_hyperLink170 = new wxHyperlinkCtrl(this, wxID_ANY, _("Help"), wxT("http://wiki.compilgames.net/doku.php/en/game_develop/tutorials/usingjsevents"), wxDefaultPosition, wxSize(-1,-1), wxHL_DEFAULT_STYLE);
    m_hyperLink170->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperLink170->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperLink170->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer164->Add(m_hyperLink170, 0, wxRIGHT|wxTOP|wxBOTTOM, 5);
    
    cancelBt = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer164->Add(cancelBt, 0, wxALL, 5);
    
    okBt = new wxButton(this, wxID_ANY, _("Ok"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer164->Add(okBt, 0, wxALL, 5);
    
    SetName(wxT("BaseJsCodeEventDialog"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_bmpButton188->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseJsCodeEventDialog::onObjectsButtonClick), NULL, this);
    m_hyperLink170->Connect(wxEVT_COMMAND_HYPERLINK, wxHyperlinkEventHandler(BaseJsCodeEventDialog::onHelpBtClick), NULL, this);
    cancelBt->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseJsCodeEventDialog::onCancelBtClick), NULL, this);
    okBt->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseJsCodeEventDialog::onOkBtClick), NULL, this);
    
}

BaseJsCodeEventDialog::~BaseJsCodeEventDialog()
{
    m_bmpButton188->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseJsCodeEventDialog::onObjectsButtonClick), NULL, this);
    m_hyperLink170->Disconnect(wxEVT_COMMAND_HYPERLINK, wxHyperlinkEventHandler(BaseJsCodeEventDialog::onHelpBtClick), NULL, this);
    cancelBt->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseJsCodeEventDialog::onCancelBtClick), NULL, this);
    okBt->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BaseJsCodeEventDialog::onOkBtClick), NULL, this);
    
}
